name: Deploy TroupeX with Cloudflare Tunnel

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_build:
        description: 'Skip Docker build (use existing images)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    if: ${{ !inputs.skip_build }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push web image
      uses: docker/build-push-action@v5
      with:
        context: ./mastodon
        file: ./mastodon/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/material-lab-io/troupex-web:main
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          RAILS_ENV=production
          NODE_ENV=production
          RUBY_VERSION=3.4.4
          NODE_MAJOR_VERSION=22

    - name: Build and push streaming image
      uses: docker/build-push-action@v5
      with:
        context: ./mastodon
        file: ./mastodon/streaming/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/material-lab-io/troupex-streaming:main
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        
        # Create .env.production
        echo "${{ secrets.PRODUCTION_ENV }}" | base64 -d > deployment-package/.env.production
        
        # Create Cloudflare tunnel config
        echo "${{ secrets.CLOUDFLARE_TUNNEL_CONFIG }}" | base64 -d > deployment-package/tunnel-config.yml
        
        # Create tunnel credentials
        echo "${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" | base64 -d > deployment-package/tunnel-creds.json
        
        # Copy deployment files
        cp docker-compose.production.yml deployment-package/
        cp -r scripts deployment-package/
        
        # Create deployment info
        cat > deployment-package/deployment-info.json << EOF
        {
          "deployment_id": "${{ github.run_id }}",
          "git_sha": "${{ github.sha }}",
          "git_ref": "${{ github.ref }}",
          "deployed_by": "${{ github.actor }}",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": "${{ github.event.inputs.environment || 'production' }}"
        }
        EOF

    - name: Setup remote environment
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no ${DROPLET_USER}@${DROPLET_IP} << 'ENDSSH'
          # Create directory structure
          mkdir -p /home/${USER}/troupex/{mastodon,scripts,backups,logs}
          mkdir -p /home/${USER}/troupex/mastodon/public/{system,assets,packs}
          mkdir -p /home/${USER}/.cloudflared
          
          # Install Cloudflared if not present
          if ! command -v cloudflared &> /dev/null; then
            echo "Installing Cloudflared..."
            wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
            sudo dpkg -i cloudflared-linux-amd64.deb
            rm cloudflared-linux-amd64.deb
          fi
          
          # Ensure Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com | bash
            sudo usermod -aG docker $USER
          fi
          
          # Create Docker networks if they don't exist
          docker network create troupex_external 2>/dev/null || true
          docker network create troupex_internal 2>/dev/null || true
        ENDSSH

    - name: Deploy application
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
      run: |
        # Upload deployment package
        scp -r deployment-package/* ${DROPLET_USER}@${DROPLET_IP}:/home/${DROPLET_USER}/troupex/
        
        # Execute deployment
        ssh -o StrictHostKeyChecking=no ${DROPLET_USER}@${DROPLET_IP} << 'ENDSSH'
          cd /home/${USER}/troupex
          
          # Move files to correct locations
          mv .env.production mastodon/
          mv tunnel-config.yml ~/.cloudflared/config.yml
          mv tunnel-creds.json ~/.cloudflared/
          chmod 600 ~/.cloudflared/*
          
          # Backup current deployment
          if [ -f mastodon/.env.production ]; then
            backup_dir="backups/backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $backup_dir
            cp mastodon/.env.production $backup_dir/
            
            # Backup database if running
            if docker compose ps | grep -q "db.*running"; then
              docker compose exec -T db pg_dump -U mastodon mastodon_production | gzip > $backup_dir/database.sql.gz
            fi
          fi
          
          # Stop current services
          docker compose -f docker-compose.yml -f docker-compose.production.yml down || true
          
          # Pull latest code
          if [ ! -d .git ]; then
            git clone https://github.com/material-lab-io/TroupeX.git .
          else
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Start core services
          docker compose -f docker-compose.yml -f docker-compose.production.yml up -d db redis
          
          # Wait for database
          echo "Waiting for database..."
          sleep 15
          
          # Run migrations
          docker compose -f docker-compose.yml -f docker-compose.production.yml run --rm web rails db:migrate
          
          # Precompile assets
          docker compose -f docker-compose.yml -f docker-compose.production.yml run --rm web rails assets:precompile
          
          # Start all services
          docker compose -f docker-compose.yml -f docker-compose.production.yml up -d
          
          # Setup Cloudflare tunnel
          echo "Setting up Cloudflare tunnel..."
          
          # Stop existing tunnel
          sudo systemctl stop cloudflared 2>/dev/null || true
          pkill -f cloudflared 2>/dev/null || true
          
          # Install as systemd service
          sudo cloudflared service install
          sudo systemctl start cloudflared
          sudo systemctl enable cloudflared
          
          # Log deployment
          echo "$(date): Deployed $GITHUB_SHA by $GITHUB_ACTOR" >> deployments.log
        ENDSSH

    - name: Verify deployment
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
        SITE_URL: ${{ secrets.SITE_URL }}
      run: |
        echo "Waiting for services to stabilize..."
        sleep 30
        
        # Check Docker services
        ssh -o StrictHostKeyChecking=no ${DROPLET_USER}@${DROPLET_IP} << 'ENDSSH'
          cd /home/${USER}/troupex
          
          echo "=== Docker Service Status ==="
          docker compose -f docker-compose.yml -f docker-compose.production.yml ps
          
          echo -e "\n=== Service Health Checks ==="
          services=("web" "streaming" "sidekiq" "db" "redis")
          for service in "${services[@]}"; do
            if docker compose ps | grep -q "${service}.*running"; then
              echo "✅ ${service} is running"
            else
              echo "❌ ${service} is not running"
              docker compose logs --tail 50 ${service}
            fi
          done
          
          echo -e "\n=== Cloudflare Tunnel Status ==="
          if sudo systemctl is-active --quiet cloudflared; then
            echo "✅ Cloudflare tunnel is active"
            sudo journalctl -u cloudflared --since "5 minutes ago" --no-pager | tail -20
          else
            echo "❌ Cloudflare tunnel is not running"
          fi
        ENDSSH
        
        # Test public endpoints
        echo -e "\n=== Public Endpoint Tests ==="
        
        # Health check
        response=$(curl -s -o /dev/null -w "%{http_code}" ${SITE_URL}/health || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed (HTTP $response)"
        else
          echo "❌ Health check failed (HTTP $response)"
        fi
        
        # API check
        response=$(curl -s -o /dev/null -w "%{http_code}" ${SITE_URL}/api/v1/instance || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ API endpoint accessible (HTTP $response)"
        else
          echo "⚠️  API endpoint returned HTTP $response"
        fi
        
        # WebSocket check
        response=$(curl -s -o /dev/null -w "%{http_code}" ${SITE_URL}/api/v1/streaming/health || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Streaming API healthy (HTTP $response)"
        else
          echo "⚠️  Streaming API returned HTTP $response"
        fi

    - name: Run post-deployment tasks
      if: success()
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no ${DROPLET_USER}@${DROPLET_IP} << 'ENDSSH'
          cd /home/${USER}/troupex
          
          # Clear cache
          docker compose exec -T web rails cache:clear
          docker compose exec -T redis redis-cli FLUSHALL
          
          # Optional: Create admin user if first deployment
          if ! docker compose exec -T web rails runner "User.exists?" 2>/dev/null; then
            echo "Creating admin user..."
            docker compose run --rm web rails mastodon:accounts:create \
              USERNAME=admin \
              EMAIL=admin@${SITE_URL#https://} \
              ROLE=Owner \
              --confirmed \
              --approve
          fi
          
          # Clean up old Docker images
          docker image prune -f
          
          # Keep only last 5 backups
          cd backups
          ls -t | tail -n +6 | xargs -r rm -rf
        ENDSSH

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary"
        echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}"
        echo "- **Commit**: ${{ github.sha }}"
        echo "- **Deployed by**: ${{ github.actor }}"
        echo "- **Workflow run**: ${{ github.run_id }}"
        echo "- **Status**: ${{ job.status }}"

    - name: Notify deployment status
      if: always() && env.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          TroupeX Deployment ${{ job.status }}
          Environment: ${{ github.event.inputs.environment || 'production' }}
          URL: ${{ secrets.SITE_URL }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    if: failure() && needs.deploy.result == 'failure'
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Rollback deployment
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
      run: |
        echo "⚠️  Deployment failed, attempting rollback..."
        
        ssh -o StrictHostKeyChecking=no ${DROPLET_USER}@${DROPLET_IP} << 'ENDSSH'
          cd /home/${USER}/troupex
          
          # Find latest backup
          latest_backup=$(ls -t backups | head -1)
          
          if [ -n "$latest_backup" ] && [ -d "backups/$latest_backup" ]; then
            echo "Rolling back to $latest_backup"
            
            # Restore environment file
            if [ -f "backups/$latest_backup/.env.production" ]; then
              cp "backups/$latest_backup/.env.production" mastodon/
            fi
            
            # Restart services with previous configuration
            docker compose -f docker-compose.yml -f docker-compose.production.yml up -d
            
            echo "Rollback completed"
          else
            echo "No backup found for rollback"
          fi
        ENDSSH